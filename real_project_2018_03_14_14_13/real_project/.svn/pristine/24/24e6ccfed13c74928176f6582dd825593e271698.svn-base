<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.dao.MemberDao">

	<select id="login" parameterType="MemberDto" resultType="MemberDto">
		SELECT m_nick, m_rating FROM member WHERE m_id=#{m_id} AND m_pass=#{m_pass} AND m_status='Y'
	</select>
	
	<select id="mList1" parameterType="MemberDto" resultType="MemberDto">
		SELECT * FROM (SELECT ROW_NUMBER() OVER(ORDER BY m_date DESC) AS rnum, m_nick, m_id, m_pass, m_date, m_name, m_address1, m_address2, m_address3, m_phone, m_rating, m_agree, m_status, m_key, ms_conum, ms_ceoname, ms_shopname, ms_phone, ms_brand FROM vw_membershop) WHERE m_rating=3
	</select>
	
	<update id="memberRatingUp" parameterType="String">
		UPDATE member SET m_rating = 2 WHERE m_nick = #{m_nick}
	</update>
	
	<select id="mList2" parameterType="MemberDto" resultType="MemberDto">
		SELECT * FROM (SELECT ROW_NUMBER() OVER(ORDER BY m_date DESC) AS rnum, m_nick, m_id, m_pass, m_date, m_name, m_address1, m_address2, m_address3, m_phone, m_rating, m_agree, m_status, m_key FROM member WHERE m_rating=1)
	</select>
	
	<!-- 소비자 회원탈퇴하기 -->
	<update id="mDel" parameterType="String">
		UPDATE member SET m_id=seq_member.NEXTVAL, m_pass='N', m_name='N', m_address1=0, m_address2='N',m_address3='N',m_phone=0, m_rating=4, m_agree='N',m_key=0, m_status='N' WHERE m_nick=#{m_nick}
	</update>
	
	<!-- 판매자 회원탈퇴하기 -->
	<update id="msDel" parameterType="String">
		UPDATE member_shop SET ms_conum=0, ms_ceoname='N', ms_shopname='N', ms_phone=0, ms_brand='N' WHERE m_nick=#{m_nick}
	</update>
	
	<select id="mList3" parameterType="MemberDto" resultType="MemberDto">
		SELECT * FROM (SELECT ROW_NUMBER() OVER(ORDER BY m_date DESC) AS rnum, m_nick, m_id, m_pass, m_date, m_name, m_address1, m_address2, m_address3, m_phone, m_rating, m_agree, m_status, m_key, ms_conum, ms_ceoname, ms_shopname, ms_phone, ms_brand FROM vw_membershop) WHERE m_rating=2
	</select>
	

	
	
	
	<!-- 학준이 -->
	
	<!-- pw 찾기  이메일로 임시 비밀번호 발송-->
	<update id="update_pw" parameterType="MemberDto">
		update member set m_pass = #{m_pass} where m_id = #{m_id}
	</update>	
	
	<!-- pw 찾기  이메일로 임시 비밀번호 발송-->
	<update id="update_pass" parameterType="MemberDto">
		update member set m_pass = #{m_pass} where m_nick = #{m_nick}
	</update>	
	
	<!-- 비밀번호 중복 검사 -->
	 <select id="pwChk" parameterType="String" resultType="String">
		select m_pass from member where m_nick = #{m_nick}
	</select> 
	
	<!-- 아이디 중복 검사 -->
	 <select id="check_id" parameterType="String" resultType="int">
		select count(*) from member where m_id = #{m_id}
	</select> 

	<!-- 닉네임 중복 검사 -->
	<select id="check_nick" parameterType="String" resultType="int">
		select count(*) from member where m_nick =#{m_nick}
	</select>
		
	<!-- 사업자 번호 중복 검사 -->
	<select id="check_conum" parameterType="String" resultType="int">
		select count(*) from member_shop where ms_conum =#{ms_conum}
	</select>	
		
	 <!-- 회원가입 소비자 -->
	 <insert id="join_member" parameterType="MemberDto">
		INSERT INTO member(m_nick, m_id, m_pass,m_date,m_name,m_address1,m_address2,m_address3,m_phone,m_rating,m_agree,m_key, m_status) VALUES (#{m_nick},#{m_id},#{m_pass},default,#{m_name},#{m_address1},#{m_address2},#{m_address3},#{m_phone},#{m_rating},#{m_agree},#{m_key},'N')
	</insert>  
	
	 <!-- 회원가입  사업자-->
	<!--  <insert id="join_member2" parameterType="MemberDto" useGeneratedKeys="true" keyProperty="m_nick">
			INSERT INTO member VALUES (#{m_nick},#{m_id},#{m_pass},default,default,default,#{m_name},#{m_address1},#{m_address2},#{m_address3},#{m_phone},'false',#{approval_key})	
			<selectKey keyProperty="m_nick" order="AFTER" resultType="String">
				SELECT m_nick FROM member			
			</selectKey>	
	</insert>   -->
	 
	 <insert id="join_member2" parameterType="MemberDto">
			INSERT INTO member_shop VALUES (#{m_nick},#{ms_conum},#{ms_ceoname},#{ms_shopname},#{ms_phone},#{ms_brand})
	</insert>  
	
	
	<!-- 이메일 인증 -->
	<update id="approval_member" parameterType="MemberDto" >
		update member set m_status = 'Y' where m_id = #{m_id, jdbcType=VARCHAR} and m_key = #{m_key}
	</update>
	
	
	<!-- id찾기-> 전화번호 입력 -->
	<select id="find_id" parameterType="String" resultType="String">
		select m_id from member where m_phone =#{m_phone}
	</select>
	
	
	<select id="getPw" parameterType="String" resultType="String">
		SELECT m_pass FROM member WHERE m_nick = #{m_nick}
	</select>
	
	<select id="myInfoPage1" parameterType="String" resultType="MemberDto">
		SELECT * FROM member WHERE m_nick = #{m_nick}
	</select>
	
	<select id="myInfoPage2" parameterType="String" resultType="MemberDto">
		SELECT * FROM vw_membershop WHERE m_nick = #{m_nick}
	</select>
	
	
	<!-- 회원정보 수정하기(공용 테이블) -->
	<update id="update_mypage" parameterType="MemberDto">
		update member set m_name = #{m_name},m_address1 = #{m_address1}, m_address2 =#{m_address2}, m_address3 =#{m_address3}, m_phone =#{m_phone} where m_nick=#{m_nick} AND m_rating=#{m_rating}
	</update>
	
	<!-- 회원정보 수정하기(사업자 테이블) -->
	<update id="update_mypage2" parameterType="MemberDto">
		update member_shop set ms_conum = #{ms_conum}, ms_ceoname=#{ms_ceoname}, ms_shopname=#{ms_shopname}, ms_phone=#{ms_phone}, ms_brand=#{ms_brand} where m_nick=#{m_nick}
	</update>
	
	<select id="passChk" parameterType="MemberDto" resultType="int">
		SELECT COUNT(m_nick) FROM member WHERE m_nick=#{m_nick} AND m_pass = #{m_pass}
	</select>
	
	<!-- 사업자 중복검사 -->
	<select id="conumChk" parameterType="int" resultType="int">
		SELECT COUNT(*) FROM vw_membershop WHERE ms_conum =#{ms_conum}
	</select>
	
	  <!-- 암호화 -->
	 <!--  <select id="getSecurityPwd" parameterType="String" resultType="String">
		SELECT m_pass FROM member WHERE m_id=#{m_id}
	</select> -->    

</mapper>